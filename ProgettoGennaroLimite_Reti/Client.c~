#include "header.h"

int main(int argc, char **argv)
{
    int sockfd,n,choice1,choice2,ClientPositionX,ClientPositionY,ClientFloor;
    char buff[1024],buff1[1024];
    char recevline[2048] ;
    struct sockaddr_in servaddr;
    if(argc != 2){
    fprintf(stderr,"usage: %s <IPaddress>\n",argv[0]);
    exit(1);
    }
    //socket
    	if ((sockfd = socket(AF_INET,SOCK_STREAM,0))<0){
	fprintf(stderr,"socket error\n");
	exit(1);
	}
    //
    servaddr.sin_family = AF_INET;
    servaddr.sin_port = htons(1024);
    if (inet_pton(AF_INET, argv[1], &servaddr.sin_addr) <= 0)
    {
        fprintf(stderr,"inet_pton error for %s\n", argv[1]);
        exit (1);
    }
    //Connect
	if (connect(sockfd, (struct sockaddr *) &servaddr, sizeof(servaddr)) < 0) {
	fprintf(stderr,"connect error\n");
	exit(1);
	}
   printf("\nLista dei servizi\n\n");
   while(1)
	{
        //read
        n = read(sockfd, recevline, 1024);
        recevline[n] = 0;
        if (fputs(recevline, stdout) == EOF)
	        {
	            fprintf(stderr,"fputs error");
	            exit(1);
	        }
	//choice service
	do{	
	printf("Decidi il servizio di cui vuoi sapere la posizione:\n");	
	scanf("%d",&choice1);
	}while(choice1<1 || choice1>23);
	if(write(sockfd,&choice1,sizeof(int)) != sizeof(int)){
	perror("write");
	exit(1);
		}
	//read the description of the service
	n=read(sockfd, recevline, 1024);
	recevline[n]=0;
	if(fputs(recevline,stdout)==EOF)
	        {
	            fprintf(stderr,"fputs error\n");
	            exit(1);
	        }
	printf("La posizione del servizio scelto Ã¨:\n\n");	
	//read the position of the service
	n=read(sockfd, recevline, 1024);
	recevline[n]=0;
	if(fputs(recevline,stdout)==EOF)
	        {
	            fprintf(stderr,"fputs error\n");
	            exit(1);
	        }
	//ask the path
	do
	{
	printf("Vuoi il percorso?\n");
        printf("1] Si\n");
        printf("2] No\n");
        scanf("%d",&choice2);
	//send the choice to infoserver
        if (write(sockfd, &choice2, sizeof(int)) != sizeof(int))
        {
            perror("write");
            exit(1);
        }
	switch (choice2)
        {
            case 1:
                printf("Per riuscire a calcolare un percorso inserisci la tua posizione\n");
		//send his position
		printf("X:\n");
		scanf("%d",&ClientPositionX);
	        if (write(sockfd, &ClientPositionX, sizeof(int)) != sizeof(int))
	        {
	            perror("write");
	            exit(1);
	        }
		printf("Y:\n");
		scanf("%d",&ClientPositionY);
	        if (write(sockfd, &ClientPositionY, sizeof(int)) != sizeof(int))
	        {
	            perror("write");
	            exit(1);
	        }
		printf("PIANO:\n");
		scanf("%d",&ClientFloor);
	        if (write(sockfd, &ClientFloor, sizeof(int)) != sizeof(int))
	        {
	            perror("write");
	            exit(1);
	        }
		//read the answer with the path
		printf("\nDi seguiti il percorso:\n\n");
		n=read(sockfd, recevline, 2048);
		recevline[n]=0;
		if(fputs(recevline,stdout)==EOF)
	        {
	            fprintf(stderr,"fputs error\n");
	            exit(1);
	        }
		printf("\nUSCITA IN CORSO...\n\n");		
		exit(1);
                break;
            case 2:
                printf("\nUSCITA IN CORSO...\n\n");
		exit(1);
		break;
	   default:
		break;
        }
	}while(choice2 < 1 || choice2 > 2);
      system("PAUSE");	
    }
    exit(0);
}

